AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cloudformation Template DAT312 ACK-RDS-GITOPS-Workshop'

Resources:

  #============================================================================#
  # Code Commit 
  #============================================================================#

  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: Empty Code Commit Repository for GitOps workshop
      RepositoryName: ack-rds-gitops-workshop1

  # Starting of the merge

  #============================================================================#
  # Creating IAM role for ACK
  #============================================================================#
  
  ACKGrants1:
    Type: Custom::ACKGrants1
    Properties:
      ServiceToken: !GetAtt 'ACKGrantsLambda1.Arn'
      
  ACKGrantsRole1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-createkeypair1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - iam:CreateRole
                  - iam:DescribeRole
                  - iam:AttachRolePolicy
                  - iam:GetRole
                  - iam:CreatePolicy
                  - ec2:DescribeSubnets
                  - memorydb:CreateSubnetGroup
                Resource:
                  - '*'

  ACKGrantsLambda1:
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates a keypair and stores private key in SSM parameter store.
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt 'ACKGrantsRole1.Arn'
      Timeout: 300
      Code:
        ZipFile: |
              import json
              import boto3
              import sys
              import os
              import urllib.request
              import cfnresponse
              import traceback
              from botocore.exceptions import ClientError

              def lambda_handler(event, context):
                  status = cfnresponse.SUCCESS
                  data = {}
                  key_name = "test"
                  aws_account_id=boto3.client('sts').get_caller_identity()
                  print ("Account id {}".format(aws_account_id))
                  print (event)
                  print(context)
                  cfnresponse.send(event, context, status, data, key_name, noEcho=True)

  
