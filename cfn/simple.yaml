AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cloudformation Template DAT312 ACK-RDS-GITOPS-Workshop'

Resources:

  #============================================================================#
  # Setting up AWSQS 
  #============================================================================#

  CFNExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      MaxSessionDuration: 8400
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [resources.cloudformation.amazonaws.com, cloudformation.amazonaws.com, lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "sts:GetCallerIdentity"
                  - "eks:CreateCluster"
                  - "eks:DeleteCluster"
                  - "eks:DescribeCluster"
                  - "eks:ListTagsForResource"
                  - "eks:UpdateClusterVersion"
                  - "eks:UpdateClusterConfig"
                  - "eks:TagResource"
                  - "eks:UntagResource"
                  - "iam:PassRole"
                  - "sts:AssumeRole"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:DeleteFunction"
                  - "lambda:GetFunction"
                  - "lambda:InvokeFunction"
                  - "lambda:CreateFunction"
                  - "lambda:UpdateFunctionCode"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "kms:CreateGrant"
                  - "kms:DescribeKey"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricData"
                Resource: "*"
  VpcProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudFormation-Kubernetes-VPC
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  AWSQSGrants:
    Type: Custom::AWSQSGrants
    Properties:
      ServiceToken: !GetAtt 'AWSQSGrantsLambda.Arn'
      awsqs_execution_role: !GetAtt CFNExecutionRole.Arn
      
  AWSQSGrantsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: AWSQSGrants-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:GetRole
                  - iam:CreatePolicy
                  - ec2:DescribeSubnets
                  - memorydb:CreateSubnetGroup
                  - cloudformation:*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                 - iam:ListInstanceProfiles
                 - iam:PassRole
                Resource: "arn:aws:iam::*:role/*"

  AWSQSGrantsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Adding AWSQS public resource to cloudformation
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt 'AWSQSGrantsRole.Arn'
      Timeout: 300
      Code:
        ZipFile: |
              import boto3
              import sys
              import os
              import urllib.request
              import cfnresponse
              import traceback
              from botocore.exceptions import ClientError

              def lambda_handler(event, context):
                  status = cfnresponse.SUCCESS
                  data = {}
                  execution_role = event['ResourceProperties']['awsqs_execution_role']
                  print(execution_role)
                  print(event)
                  try:
                    client = boto3.client("cloudformation")
                    response = client.activate_type(
                       Type='RESOURCE',
                       TypeName='AWSQS::EKS::Cluster',
                       PublisherId='408988dff9e863704bcc72e7e13f8d645cee8311',
                       AutoUpdate=True,
                       ExecutionRoleArn= execution_role)
                    
                  except Exception as e:
                    logging.error(e, exc_info=True)
                    data = {'Error': str(traceback.format_exc(e))}
                    status = cfnresponse.FAILED
                  cfnresponse.send(event, context, status, data, 'CustomResourcePhysicalID')
